[
  {
    "name": "Files - Distribution of Bug Magnets with duplication",
    "slug": "bug-magnets-with-duplication",
    "highlight": "anomaly.*Duplication* and anomaly.*BugMagnet*",
    "domain": "status",
    "colorScheme": "default",
    "perspective": {
      "query": "changes",
      "numberOfGroups": 3,
      "thresholds": [
        3,
        10
      ]
    },
    "notes": "This system map highlights files affected by both Bug Magnet and Duplication anomalies. The highlight helps identify overlapping problem areas where test fragility and code duplication co-occur.\n\nThe color gradient represents change frequency, divided into three tiers.\n\nIt helps answer questions like:\n- Are Bug Magnet files also suffering from duplication?\n- Are specific modules more prone to both kinds of issues?\n- Where should we prioritize cleanup or refactoring to improve maintainability and testability?\n\nUse this view to locate structural hotspots that combine testing challenges with code duplication.",
    "tableColumns": [
      {
        "type": "property",
        "value": "path"
      },
      {
        "type": "classifier",
        "label": "component",
        "value": "component"
      },
      {
        "type": "classifier",
        "label": "repo",
        "value": "repo"
      },
      {
        "type": "property",
        "value": "name"
      },
      {
        "type": "property",
        "value": "size"
      },
      {
        "type": "property",
        "value": "extension"
      },
      {
        "type": "property",
        "value": "first change"
      },
      {
        "type": "property",
        "value": "last change"
      },
      {
        "type": "metric",
        "query": "count changes",
        "label": "All Changes",
        "value": "column1"
      },
      {
        "type": "metric",
        "query": "strength of anomaly.testing.BugMagnet",
        "label": "Bug Magnet",
        "value": "column2"
      },
      {
        "type": "metric",
        "query": "strength of anomaly.structuring.ExternalDuplication",
        "label": "External Duplication",
        "value": "column3"
      },
      {
        "type": "metric",
        "query": "strength of anomaly.codesmell.duplication.InternalDuplication",
        "label": "Internal Duplication",
        "value": "column4"
      },
      {
        "type": "metric",
        "query": "count changes during last year",
        "label": "Last Year Changes",
        "value": "column5"
      },
      {
        "type": "metric",
        "query": "sum growth of changes during last year",
        "label": "Last Year Growth",
        "value": "column6"
      },
      {
        "type": "metric",
        "query": "sum churn of changes during last year",
        "label": "Last Year Change Volume",
        "value": "column7"
      },
      {
        "type": "metric",
        "query": "count authors having not name starts with _ for commits during last year",
        "label": "Last Year Developers",
        "value": "column8"
      },
      {
        "type": "metric",
        "query": "strength of anomaly.cohesion.tangling.PivotFile",
        "label": "Pivot File",
        "value": "column9"
      },
      {
        "type": "metric",
        "query": "strength of anomaly.cohesion.tangling.TasksBottleneck",
        "label": "Tasks Bottleneck",
        "value": "column10"
      },
      {
        "type": "metric",
        "query": "strength of anomaly.cohesion.coordination.Bazaar",
        "label": "Bazaar",
        "value": "column11"
      },
      {
        "type": "metric",
        "query": "strength of anomaly.knowledge.lost.WeakOwnership",
        "label": "Weak Ownership",
        "value": "column12"
      }
    ],
    "section": "test-automation",
    "traits": [
      "aspect.testing-efficacy",
      "aspect.duplication",
      "aspect.clean-code",
      "aspect.testing-coverage"
    ]
  },
  {
    "name": "Files - Distribution of complexity hotspots",
    "slug": "complexity-hotspots",
    "highlight": "strength of metric.atc >= 1 and size >= 500 and changes >= 20 and has changes during last year",
    "domain": "status",
    "filter": "technology.code",
    "colorScheme": "default",
    "perspective": {
      "query": "changes",
      "numberOfGroups": 3,
      "thresholds": [
        3,
        10
      ]
    },
    "notes": "This system map highlights complexity hotspots (large, frequently changed, and complex source files with recent activity). It helps answer questions like:\n- Which files are the most complex and active?\n- Are complex files also tangling responsibilities or showing testing anomalies?\n- Where is high complexity correlated with change frequency?\n\nUse this view to identify high-maintenance, high-risk parts of the codebase.",
    "tableColumns": [
      {
        "type": "property",
        "value": "path"
      },
      {
        "type": "classifier",
        "label": "component",
        "value": "component"
      },
      {
        "type": "classifier",
        "label": "repo",
        "value": "repo"
      },
      {
        "type": "property",
        "value": "name"
      },
      {
        "type": "property",
        "value": "size"
      },
      {
        "type": "metric",
        "query": "strength of metric.atc",
        "label": "ATC",
        "value": "column1"
      },
      {
        "type": "metric",
        "query": "strength of metric.cntFunctions",
        "label": "Functions",
        "value": "column2"
      },
      {
        "type": "property",
        "value": "extension"
      },
      {
        "type": "property",
        "value": "first change"
      },
      {
        "type": "property",
        "value": "last change"
      },
      {
        "type": "metric",
        "query": "count changes",
        "label": "All Changes",
        "value": "column3"
      },
      {
        "type": "metric",
        "query": "count changes during last year",
        "label": "Last Year Changes",
        "value": "column4"
      },
      {
        "type": "metric",
        "query": "sum growth of changes during last year",
        "label": "Last Year Growth",
        "value": "column5"
      },
      {
        "type": "metric",
        "query": "sum churn of changes during last year",
        "label": "Last Year Change Volume",
        "value": "column6"
      },
      {
        "type": "metric",
        "query": "count authors having not name starts with _ for commits during last year",
        "label": "Last Year Developers",
        "value": "column7"
      },
      {
        "type": "metric",
        "query": "strength of anomaly.cohesion.tangling.PivotFile",
        "label": "Pivot File",
        "value": "column8"
      },
      {
        "type": "metric",
        "query": "strength of anomaly.cohesion.tangling.TasksBottleneck",
        "label": "Tasks Bottleneck",
        "value": "column9"
      },
      {
        "type": "metric",
        "query": "strength of anomaly.cohesion.coordination.Bazaar",
        "label": "Bazaar",
        "value": "column10"
      },
      {
        "type": "metric",
        "query": "strength of anomaly.testing.BugMagnet",
        "label": "Bug Magnet",
        "value": "column11"
      },
      {
        "type": "metric",
        "query": "strength of anomaly.knowledge.lost.WeakOwnership",
        "label": "Weak Ownership",
        "value": "column12"
      },
      {
        "type": "metric",
        "query": "strength of anomaly.testing.CriticalWeakCoverage",
        "label": "Critical Weak Coverage",
        "value": "column13"
      },
      {
        "type": "metric",
        "query": "strength of anomaly.cohesion.tangling.CallHub",
        "label": "Call Hub",
        "value": "column14"
      },
      {
        "type": "metric",
        "query": "strength of anomaly.cohesion.tangling.DataHub",
        "label": "Data Hub",
        "value": "column15"
      }
    ],
    "section": "separation-of-concerns",
    "traits": [
      "report-section.maintainability-code-complexity",
      "aspect.responsibility-balance",
      "aspect.cognitive-load",
      "aspect.current-activity-hotspots",
      "aspect.clean-code",
      "aspect.testing-coverage"
    ]
  },
  {
    "name": "Files - Distribution of code duplication",
    "slug": "duplicate-code",
    "highlight": "anomaly.*Dup*",
    "filter": "technology.code",
    "domain": "creationYear",
    "colorScheme": "default",
    "perspective": {
      "query": "changes",
      "numberOfGroups": 3,
      "thresholds": [
        3,
        10
      ]
    },
    "notes": "This system map highlights files with duplication anomalies. It helps answer:\n- How widespread is code duplication?\n- Are newer files more prone to duplication?\n- Do certain modules have concentrated duplication issues?\n\nUse this view to locate duplication patterns that may impact maintainability and readability.",
    "tableColumns": [
      {
        "type": "property",
        "value": "name"
      },
      {
        "type": "property",
        "value": "path"
      },
      {
        "type": "property",
        "value": "extension"
      },
      {
        "type": "property",
        "value": "size"
      },
      {
        "type": "metric",
        "query": "count changes",
        "label": "Changes",
        "value": "fileChanges"
      },
      {
        "type": "property",
        "value": "first change"
      },
      {
        "type": "property",
        "value": "last change"
      },
      {
        "type": "classifier",
        "label": "Domain",
        "value": "domainValue"
      },
      {
        "type": "metric",
        "query": "changes",
        "label": "Perspective",
        "value": "perspectiveValue"
      }
    ],
    "section": "feature-encapsulation",
    "traits": [
      "report-section.maintainability-duplication",
      "aspect.duplication"
    ]
  },
  {
    "name": "Files - Source code (test vs production)",
    "slug": "files-by-role",
    "filter": "technology.code",
    "domain": "role",
    "colorScheme": "default",
    "perspective": {
      "query": "changes",
      "numberOfGroups": 3,
      "thresholds": [
        3,
        10
      ]
    },
    "notes": "This map compares test vs. production source code distribution. It helps answer:\n- Is test code proportionate to production code?\n- Are some modules under-tested?\n- Does testing coverage vary across components?\n\nUse this view to assess test coverage patterns and testing investment.",
    "tableColumns": [
      {
        "type": "property",
        "value": "name"
      },
      {
        "type": "property",
        "value": "path"
      },
      {
        "type": "property",
        "value": "extension"
      },
      {
        "type": "property",
        "value": "size"
      },
      {
        "type": "metric",
        "query": "count changes",
        "label": "Changes",
        "value": "fileChanges"
      },
      {
        "type": "property",
        "value": "first change"
      },
      {
        "type": "property",
        "value": "last change"
      },
      {
        "type": "classifier",
        "label": "Domain",
        "value": "domainValue"
      },
      {
        "type": "metric",
        "query": "changes",
        "label": "Perspective",
        "value": "perspectiveValue"
      }
    ],
    "section": "test-automation",
    "traits": [
      "report-section.test-automation",
      "aspect.testing-coverage"
    ]
  },
  {
    "name": "Files - Source-code (by creation year)",
    "slug": "source-code-by-file-creation-year",
    "filter": "technology.code",
    "domain": "creationYear",
    "colorScheme": "default",
    "perspective": {
      "query": "changes",
      "numberOfGroups": 2,
      "thresholds": [
        10
      ]
    },
    "notes": "This map shows when files were first created, grouped by creation year. It helps answer:\n- What is the age distribution of the codebase?\n- Are new files being added consistently?\n- Are there architectural patterns in yearly additions?\n\nUse this view to analyze growth trends and focus areas over time.",
    "tableColumns": [
      {
        "type": "property",
        "value": "name"
      },
      {
        "type": "property",
        "value": "path"
      },
      {
        "type": "property",
        "value": "extension"
      },
      {
        "type": "property",
        "value": "size"
      },
      {
        "type": "metric",
        "query": "count changes",
        "label": "Changes",
        "value": "fileChanges"
      },
      {
        "type": "property",
        "value": "first change"
      },
      {
        "type": "property",
        "value": "last change"
      },
      {
        "type": "classifier",
        "label": "Domain",
        "value": "domainValue"
      },
      {
        "type": "metric",
        "query": "changes",
        "label": "Perspective",
        "value": "perspectiveValue"
      }
    ],
    "section": "overview",
    "traits": [
      "report-section.development-patterns",
      "aspect.code-evolution",
      "aspect.current-activity-hotspots",
      "aspect.freshness",
      "aspect.locality-of-changes"
    ]
  },
  {
    "name": "Files - Distribution of active code (by creation year)",
    "slug": "source-code-by-file-creation-year-recent-activity",
    "highlight": "has changes during last year",
    "filter": "technology.code",
    "domain": "creationYear",
    "colorScheme": "default",
    "perspective": {
      "query": "changes during last year",
      "numberOfGroups": 2,
      "thresholds": [
        10
      ]
    },
    "notes": "This map highlights files that have changed in the last year, grouped by creation year. It helps answer:\n- Are recent changes focused on older files or newer ones?\n- Which parts of the codebase are currently under active maintenance?\n\nUse this view to understand activity trends across old and new parts of the system.",
    "tableColumns": [
      {
        "type": "property",
        "value": "name"
      },
      {
        "type": "property",
        "value": "path"
      },
      {
        "type": "property",
        "value": "extension"
      },
      {
        "type": "property",
        "value": "size"
      },
      {
        "type": "metric",
        "query": "count changes",
        "label": "Changes",
        "value": "fileChanges"
      },
      {
        "type": "property",
        "value": "first change"
      },
      {
        "type": "property",
        "value": "last change"
      },
      {
        "type": "classifier",
        "label": "Domain",
        "value": "domainValue"
      },
      {
        "type": "metric",
        "query": "changes during last year",
        "label": "Perspective",
        "value": "perspectiveValue"
      }
    ],
    "section": "overview",
    "traits": [
      "report-section.development-patterns",
      "aspect.current-activity-hotspots",
      "aspect.freshness",
      "aspect.recent-activity-patterns",
      "aspect.locality-of-changes"
    ]
  },
  {
    "name": "Files - Source code (by latest change year)",
    "slug": "source-code-by-file-latest-change-year",
    "filter": "technology.code",
    "domain": "latestChangeYear",
    "colorScheme": "default",
    "perspective": {
      "query": "changes",
      "numberOfGroups": 2,
      "thresholds": [
        10
      ]
    },
    "notes": "This view compares file creation year with the latest change year. It helps answer:\n- Are older files still being modified?\n- Are newly created files actively maintained?\n\nUse this map to detect maintenance activity patterns and legacy code engagement.",
    "tableColumns": [
      {
        "type": "property",
        "value": "name"
      },
      {
        "type": "property",
        "value": "path"
      },
      {
        "type": "property",
        "value": "extension"
      },
      {
        "type": "property",
        "value": "size"
      },
      {
        "type": "metric",
        "query": "count changes",
        "label": "Changes",
        "value": "fileChanges"
      },
      {
        "type": "property",
        "value": "first change"
      },
      {
        "type": "property",
        "value": "last change"
      },
      {
        "type": "classifier",
        "label": "Domain",
        "value": "domainValue"
      },
      {
        "type": "metric",
        "query": "changes",
        "label": "Perspective",
        "value": "perspectiveValue"
      }
    ],
    "section": "overview",
    "traits": [
      "report-section.development-patterns",
      "aspect.code-evolution",
      "aspect.current-activity-hotspots",
      "aspect.freshness",
      "aspect.locality-of-changes"
    ]
  },
  {
    "name": "Files - Distribution of test coverage ",
    "slug": "test-coverage",
    "highlight": "strength of metric.testReferences > 0",
    "filter": "technology.code and role.production",
    "domain": "component",
    "colorScheme": "default",
    "perspective": {
      "query": "strength of metric.testReferences",
      "numberOfGroups": 3,
      "thresholds": [
        1,
        3
      ]
    },
    "notes": "This map shows test coverage strength across production files. It helps answer:\n- Which files are well-covered by tests?\n- Are large or complex files adequately tested?\n- Are newer files better tested than older ones?\n\nUse this view to evaluate the distribution and strength of test coverage.",
    "tableColumns": [
      {
        "type": "property",
        "value": "name"
      },
      {
        "type": "property",
        "value": "path"
      },
      {
        "type": "property",
        "value": "extension"
      },
      {
        "type": "property",
        "value": "size"
      },
      {
        "type": "metric",
        "query": "count changes",
        "label": "Changes",
        "value": "fileChanges"
      },
      {
        "type": "property",
        "value": "first change"
      },
      {
        "type": "property",
        "value": "last change"
      },
      {
        "type": "classifier",
        "label": "Domain",
        "value": "domainValue"
      },
      {
        "type": "metric",
        "query": "strength of metric.testReferences",
        "label": "Perspective",
        "value": "perspectiveValue"
      }
    ],
    "section": "test-automation",
    "traits": [
      "aspect.testing-coverage"
    ]
  },
  {
    "name": "Files (by repository)",
    "slug": "codebase-structure-by-repo",
    "colorScheme": "tableau",
    "domain": "repo",
    "perspective": {
      "query": "changes",
      "numberOfGroups": 1,
      "thresholds": []
    },
    "section": "code-organisation",
    "traits": [
      "report-section.maintainability-code-organisation",
      "aspect.cognitive-load",
      "aspect.responsibility-balance"
    ],
    "notes": "This map shows the structural organization of the codebase by repository. Use it to:\n- Understand repo boundaries and distribution\n- Spot repo ownership and cohesion issues\n- Navigate the system from a repository-centric perspective"
  },
  {
    "name": "Files (by component)",
    "slug": "codebase-structure-by-component",
    "colorScheme": "tableau",
    "domain": "component",
    "perspective": {
      "query": "changes",
      "numberOfGroups": 1
    },
    "section": "code-organisation",
    "traits": [
      "report-section.maintainability-code-organisation",
      "aspect.cognitive-load",
      "aspect.responsibility-balance"
    ],
    "notes": "This map visualizes code grouped by logical components. It helps answer:\n- How is code distributed across components?\n- Are component boundaries respected structurally?\n\nUse this view for system decomposition and component ownership analysis."
  },
  {
    "name": "Files - Flat Structures",
    "slug": "files-flat-structures",
    "foldersHighlight": "has more than 100 direct children and size > 10000",
    "domain": {
      "classifier": "component",
      "sort": "by value"
    },
    "colorScheme": "main",
    "perspective": {
      "query": "changes",
      "numberOfGroups": 1,
      "thresholds": []
    },
    "section": "code-organisation",
    "traits": [
      "report-section.maintainability-code-organisation",
      "aspect.responsibility-balance"
    ],
    "notes": "This map highlights folders with flat structures (i.e., many direct children). It helps answer:\n- Where is folder hierarchy shallow or overloaded?\n- Are some modules overly crowded?\n\nUse this view to detect organization issues that hinder navigation and modularity."
  },
  {
    "name": "Files - Ungrouped (Orphaned) classes",
    "slug": "files-ungrouped-orphaned-classes",
    "highlight": "has technology.code.backend and has direct parent having direct subfolders having files having technology.code.backend",
    "foldersHighlight": "has direct subfolders having files having technology.code.backend and has direct files having technology.code.backend",
    "domain": "status",
    "filter": "technology.code and role.production",
    "colorScheme": "default",
    "perspective": {
      "query": "changes",
      "numberOfGroups": 3,
      "thresholds": [
        3,
        10
      ]
    },
    "notes": "This map highlights ungrouped (orphaned) backend classes. It helps answer:\n- Are there backend files not grouped under clear modules?\n- Do any root folders contain unstructured class files?\n\nUse this view to assess structural organization and modular cohesion.",
    "section": "code-organisation",
    "traits": [
      "report-section.maintainability-code-organisation",
      "aspect.responsibility-balance",
      "aspect.uniformity"
    ]
  }
]
